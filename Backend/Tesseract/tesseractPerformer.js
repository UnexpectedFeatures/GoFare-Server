import { createWorker } from "tesseract.js";
import { promises as fs } from "fs";
import path from "path";

async function findAndOCRImages() {
  try {
    const imagesDir = path.join(process.cwd(), "images");
    const folders = await fs.readdir(imagesDir);

    const idFolders = await Promise.all(
      folders.map(async (folder) => {
        const folderPath = path.join(imagesDir, folder);
        const stats = await fs.stat(folderPath);
        return stats.isDirectory() && /^[a-z0-9]{8,}$/i.test(folder)
          ? folder
          : null;
      })
    ).then((results) => results.filter(Boolean));

    if (idFolders.length === 0) {
      console.log("No autogenerated ID folders found in /images");
      return;
    }

    for (const folder of idFolders) {
      const folderPath = path.join(imagesDir, folder);
      const files = await fs.readdir(folderPath);

      const imageFiles = files.filter((file) =>
        /\.(png|jpg|jpeg|bmp|tiff|webp)$/i.test(file)
      );

      if (imageFiles.length === 0) {
        console.log(`No images found in ${folder}`);
        continue;
      }

      const worker = await createWorker("eng");

      for (const imageFile of imageFiles) {
        const imagePath = path.join(folderPath, imageFile);
        console.log(`Processing ${imagePath}...`);

        try {
          const {
            data: { text },
          } = await worker.recognize(imagePath);
          console.log(`OCR Results for ${imageFile}:\n${text}\n`);

          const outputPath = path.join(
            folderPath,
            `${path.parse(imageFile).name}.txt`
          );
          await fs.writeFile(outputPath, text);
          console.log(`Results saved to ${outputPath}`);
        } catch (err) {
          console.error(`Error processing ${imageFile}:`, err.message);
        }
      }

      await worker.terminate();
    }
  } catch (err) {
    console.error("Error in findAndOCRImages:", err);
  }
}

findAndOCRImages();
